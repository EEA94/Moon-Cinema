generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id      String @id @default(uuid()) @db.Uuid
  Text    String
  movieId String @db.Uuid
  userId  String @db.Uuid
  movie   Movie  @relation(fields: [movieId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model Feedback {
  id       String @id @default(uuid()) @db.Uuid
  Text     String @db.Text
  userId   String @db.Uuid 
  user     User @relation(fields: [userId], references: [id])
}

model Movie {
  id       String    @id @default(uuid()) @db.Uuid
  Title    String    @unique
  Plot     String
  Genre    String
  Actors   String
  Language String
  Director String
  Release  String
  Poster   String
  Rated    String
  Trailer  String
  Runtime  Int
  Type     String
  comments Comment[]
  show     Show[]
}

model Room {
  id              String      @id @default(uuid()) @db.Uuid
  name            String @unique @db.Text
  disponibility   Boolean? @default(true)
  roomType        String @db.Text
  seat            Seat[]
  show            Show[]
  ticket          Ticket[]
}

model Sale {
  id              String   @id @default(uuid()) @db.Uuid
  receipt         String  @unique
  userId          String   @db.Uuid
  user            User     @relation(fields: [userId], references: [id])
  ticket          Ticket[]
}

model Seat {
  id          String   @id @default(uuid()) @db.Uuid
  ticketId    Int    @unique
  roomId      Int      @unique
  room        Room    @relation(fields: [id], references: [id])
  ticket      Ticket?
}

model Show {
  id        String   @id @default(uuid()) @db.Uuid
  schedule  String 
  roomId    String   @db.Uuid
  movieId   String   @db.Uuid 
  movie     Movie    @relation(fields: [movieId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
  ticket    Ticket[]
}

model Ticket {
  id     String   @id @default(uuid()) @db.Uuid
  seatId Int      @unique
  saleId String   @db.Uuid
  showId String   @db.Uuid
  room   Room     @relation(fields: [id], references: [id])
  sale   Sale     @relation(fields: [saleId],references: [id])
  seat   Seat     @relation(fields: [seatId], references: [ticketId])
  show   Show     @relation(fields: [showId], references: [id])
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  username String @unique @db.Text
  password String @db.Text
  role     String @db.Text
  sale     Sale[]
  feedback Feedback[]
  comments Comment[]
  email    String @unique
}

enum Status {
  CREATED
  PROCESSING
  CANCELLED
  COMPLETED
}

